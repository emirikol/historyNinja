grammar EuConf

  rule file
    (statement/empty_line/(space* comment))+ {
      def foo
        elements.select{|e| FooNode === e }.each_with_object({}){|f,h| 
          key, value = f.term.text_value, f.value.bar
          if h[key]
            if h[key].kind_of?(Array)
              h[key] << value
            else
              h[key] = [h[key], value]
            end
          else
            h[key] = value
          end
          #if value.kind_of?(Hash)
          #  h[key] = (h[key]||{}).merge(value)
          #else
          #  h[key] = value
          #end
        }
      end
    }
  end
  
  rule statement
   space* term space* '=' space* value space* comment? ( endline / ( !. ) )? <FooNode>
  end
  
  rule term
    word
  end
  
  rule value
    word {
     def bar
      w = text_value.delete('"')
      case w
        when 'no'
          false
        when 'yes'
          true
        when /^\d+$/
          w.to_i
        else
          w
      end
     end
    } 
    / 
     open_paren body:(statement/empty_line/(space* comment))+ end_paren {
      def bar
        body.elements.select{|e| FooNode === e}.each_with_object({}) do |f,h|
          h[f.term.text_value] = f.value.bar
        end
      end
    }
  end
  
  rule open_paren
    '{' (space* endline)? 
  end
  
  rule end_paren
    space* '}'
  end
  
  rule word
    ([[:word:].\-,&]+) / ('"' quoted_word '"')
  end
  
  rule quoted_word
    (!'"' .)+ / ''
  end
  
  rule empty_line
    space* endline
  end
  
  rule comment
    '#'  ( !( endline / eof ) . )* ( endline / eof )
  end
  
  rule eof
   !.
  end
  
  rule endline
    "\r\n" / "\r" / "\n"
  end
  
  rule space
    ' ' / "\t"
  end

end